type TxReceipt = 
 variant {
   Err:
    variant {
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other: text;
      Unauthorized;
    };
   Ok: nat;
 };
type TokenInfo = 
 record {
   cycles: nat;
   deployTime: Time;
   feeTo: principal;
   historySize: nat;
   holderNumber: nat;
   metadata: Metadata;
 };
type Token = 
 service {
   allowance: (principal, principal) -> (nat) query;
   approve: (principal, nat) -> (TxReceipt);
   balanceOf: (principal) -> (nat) query;
   borrow: (nat) -> (BorrowResult);
   burn: (principal, nat) -> (TxReceipt);
   calcExchangeRate: () -> (nat);
   decimals: () -> (nat) query;
   exchangeRateCurrent: () -> (nat) query;
   getAllowanceSize: () -> (nat) query;
   getApprovedBal: (principal) -> (opt nat) query;
   getBalancesSize: () -> (nat) query;
   getBorrowBal: (principal) -> (opt nat) query;
   getCash: () -> (nat);
   getHolders: (nat, nat) -> (vec record {
                                    principal;
                                    nat;
                                  }) query;
   getLBBalance: (principal) -> (vec nat) query;
   getLastBlock: () -> (Block) query;
   getLendingBal: (principal) -> (opt nat) query;
   getMetadata: () -> (Metadata) query;
   getNotInteractedCount: () -> (nat) query;
   getSupplyBorrowRate: () -> (nat, nat, nat);
   getTokenFee: () -> (nat) query;
   getTokenInfo: () -> (TokenInfo) query;
   getUserApprovals: (principal) -> (vec record {
                                           principal;
                                           nat;
                                         }) query;
   getdecimals: () -> (nat8) query;
   getfiat: () -> (float64) query;
   historySize: () -> (nat) query;
   liquidate: (principal, principal) -> ();
   logo: () -> (text) query;
   mint: (nat) -> (TxReceipt);
   name: () -> (text) query;
   reedem: (nat) -> (BorrowResult);
   repay: (principal, nat) -> (BorrowResult);
   setFee: (nat) -> () oneway;
   setFeeTo: (principal) -> () oneway;
   setLogo: (text) -> () oneway;
   setName: (text) -> () oneway;
   setOwner: (principal) -> () oneway;
   symbol: () -> (text) query;
   topUp: () -> (nat);
   totalBorrows: () -> (nat) query;
   totalReserves: () -> (nat);
   totalSupply: () -> (nat) query;
   transfer: (principal, nat) -> (TxReceipt);
   transferFrom: (principal, principal, nat) -> (TxReceipt);
   update_fiat: (float64) -> (float64);
 };
type Time = int;
type Metadata = 
 record {
   decimals: nat8;
   fee: nat;
   logo: text;
   name: text;
   owner: principal;
   symbol: text;
   totalSupply: nat;
 };
type BorrowSuccess = nat;
type BorrowResult = 
 variant {
   err: BorrowError;
   ok: BorrowSuccess;
 };
type BorrowError = 
 variant {
   InsufficientFunds: text;
   InvalidDelta: record {
                   int;
                   text;
                 };
   NoLiquidity: record {
                  int;
                  text;
                };
   NotAuthorized: record {
                    principal;
                    text;
                  };
   Other: text;
   TransferFailed: text;
 };
type Block = 
 record {
   hasInterestAccrued: bool;
   interest: nat;
   number: nat;
   timestamp: Time;
 };
service : (text, text, text, nat8, nat, principal, nat) -> Token
